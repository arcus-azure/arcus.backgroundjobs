(self.webpackChunkarcus_background_jobs=self.webpackChunkarcus_background_jobs||[]).push([[151],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return l},kt:function(){return b}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=r.createContext({}),u=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},l=function(e){var t=u(e.components);return r.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),p=u(n),b=i,g=p["".concat(c,".").concat(b)]||p[b]||d[b]||a;return n?r.createElement(g,o(o({ref:t},l),{},{components:n})):r.createElement(g,o({ref:t},l))}));function b(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=p;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var u=2;u<a;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},3921:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return c},metadata:function(){return u},toc:function(){return l},default:function(){return p}});var r=n(2122),i=n(9756),a=(n(7294),n(3905)),o=["components"],s={title:"Interact with Databricks to gain insights",layout:"default"},c="Interact with Databricks to gain insights",u={unversionedId:"Features/Databricks/gain-insights",id:"version-0.2/Features/Databricks/gain-insights",isDocsHomePage:!1,title:"Interact with Databricks to gain insights",description:"Installation",source:"@site/versioned_docs/version-0.2/02-Features/03-Databricks/gain-insights.md",sourceDirName:"02-Features/03-Databricks",slug:"/Features/Databricks/gain-insights",permalink:"/Features/Databricks/gain-insights",editUrl:"https://github.com/Mcalewaert/arcus.backgroundjobs/edit/master/versioned_docs/version-0.2/02-Features/03-Databricks/gain-insights.md",version:"0.2",frontMatter:{title:"Interact with Databricks to gain insights",layout:"default"},sidebar:"version-0.2/tutorialSidebar",previous:{title:"Automatically Invalidate Azure Key Vault Secrets",permalink:"/Features/Security/auto-invalidate-secrets"},next:{title:"Measure Databricks job run outcomes as metric",permalink:"/Features/Databricks/job-metrics"}},l=[{value:"Installation",id:"installation",children:[]},{value:"Usage",id:"usage",children:[{value:"Getting finished job run information",id:"getting-finished-job-run-information",children:[]},{value:"Measure finished job outcomes",id:"measure-finished-job-outcomes",children:[]}]}],d={toc:l};function p(e){var t=e.components,n=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"interact-with-databricks-to-gain-insights"},"Interact with Databricks to gain insights"),(0,a.kt)("h2",{id:"installation"},"Installation"),(0,a.kt)("p",null,"To use these features, you have to install the following package:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"PM > Install-Package Arcus.BackgroundJobs.Databricks\n")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"\ud83d\udca1 With using our ",(0,a.kt)("a",{parentName:"p",href:"https://www.nuget.org/packages/Arcus.Observability.Telemetry.Serilog.Sinks.ApplicationInsights/"},"Arcus.Observability.Telemetry.Serilog.Sinks.ApplicationInsights"),", you can report these Databricks reports as metrics in Application Insights.")),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)("p",null,"We provide a  ",(0,a.kt)("inlineCode",{parentName:"p"},"DatabricksInfoProvider")," which allows you to interact with Databricks clusters to gain insights on your workloads, such as measuring job run outcomes."),(0,a.kt)("p",null,"It can be easily setup and used anywhere such as .NET Core workers, Azure Functions and more. We are using this ourselves for our ",(0,a.kt)("a",{parentName:"p",href:"./job-metrics"},"job metrics"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-objectivec"},'using Arcus.BackgroundJobs.Databricks;\nusing Microsoft.Azure.Databricks.Client;\nusing Microsoft.Extensions.Logging;\n\nILogger logger = ...\nusing (var client = DatabricksClient.CreateClient("https://databricks.base.url", "security.token"))\nusing (var provider = new DatabricksInfoProvider(client, logger))\n{\n}\n')),(0,a.kt)("h3",{id:"getting-finished-job-run-information"},"Getting finished job run information"),(0,a.kt)("p",null,"Gets all the finished job runs within a given time window."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-objectivec"},"using Arcus.BackgroundJobs.Databricks;\n\nDatabricksInfoProvider provider = ...\nvar startOfWindow = DateTimeOffset.UtcNow.AddDays(-1);\nvar endOfWindow = DateTimeOffset.UtcNow;\nIEnumerable<JobRun> finishedJobRuns = await provider.GetFinishedJobRunsAsync(startOfWindow, endOfWindow);\n")),(0,a.kt)("p",null,"It provides following information about the job that was executated, such as name & id, along with ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/Azure/azure-databricks-client/blob/master/csharp/Microsoft.Azure.Databricks.Client/Run.cs"},"details about a single job run"),"."),(0,a.kt)("h3",{id:"measure-finished-job-outcomes"},"Measure finished job outcomes"),(0,a.kt)("p",null,"Measures the finished job runs by reporting the results as (multi-dimensional) metrics."),(0,a.kt)("p",null,"This method is an combination of the previously defined method (",(0,a.kt)("strong",{parentName:"p"},"Getting finished jobs"),") and calling an ",(0,a.kt)("inlineCode",{parentName:"p"},"ILogger")," extension provided in this package (",(0,a.kt)("inlineCode",{parentName:"p"},"ILogger.LogMetricFinishedJobOutcome"),") which will write the finished job runs ",(0,a.kt)("inlineCode",{parentName:"p"},"JobRun")," instances as metrics."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-objectivec"},'using Arcus.BackgroundJobs.Databricks;\n\nDatabricksInfoProvider provider = ...\nvar metricName = "Databricks Job Completed";\nvar startOfWindow = DateTimeOffset.UtcNow.AddDays(-1);\nvar endOfWindow = DateTimeOffset.UtcNow;\nawait provider.MeasureJobOutcomesAsync(metricName, startOfWindow, endOfWindow);\n// Logs > Metric Databricks Job Completed: 1 {UtcNow} (Context: {[Run Id] = my.run.id, [Job Id] = my.job.id, [Job Name] = my.job.name, [Outcome] = Success})\n')),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Note: you can always call ",(0,a.kt)("strong",{parentName:"p"},"Getting finished jobs")," yourself and pass along the finished jobs to the available ",(0,a.kt)("inlineCode",{parentName:"p"},"ILogger.LogMetricFinishedJobOutcome")," extension.\nThat way, you can pass along additional contextual properties")),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"/"},"\u2190"," back")))}p.isMDXComponent=!0}}]);